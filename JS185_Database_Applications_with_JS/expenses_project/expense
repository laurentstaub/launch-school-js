#!/usr/bin/env node

const PROCESS = require('process');
const READLINE = require('readline');
const { Client } = require('pg');

function logAndExit(err) {
  console.log(err);
  PROCESS.exit(1);
}

class ExpenseData {
  constructor() {
    this.client = new Client({ database: 'expense_project' });
  }

  async addExpense (amount, memo) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));
    let date = new Date().toLocaleDateString();
  
    let queryText = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)';
    let queryValues = [amount, memo, date];
    await this.client.query(queryText, queryValues).catch(err => logAndExit(err));
    
    await this.client.end().catch(err => logAndExit(err));
  }

  async listExpenses () {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));

    let data = await this.client.query("SELECT * FROM expenses ORDER BY created_on ASC")
                           .catch(err => logAndExit(err));
  
    this.displayCount(data);
    this.displayExpenses(data);
    if (data.rows.length > 1) this.displayTotal(data);

    await this.client.end().catch(err => logAndExit(err));
  }

  async searchExpenses(termToSearch) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));

    let queryText = 'SELECT * FROM expenses WHERE memo ILIKE $1';
    let data = await this.client.query(queryText, [`%${termToSearch}%`]).catch(err => logAndExit(err));

    this.displayCount(data);
    this.displayExpenses(data);
    if (data.rows.length > 1) this.displayTotal(data);
  
    await this.client.end().catch(err => logAndExit(err));
  }

  async deleteExpense(id) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));

    let queryText = 'SELECT * FROM expenses WHERE id = $1';
    let data = await this.client.query(queryText, [id]);

    if (data.rows.length = 1) {
      let queryText = 'DELETE FROM expenses WHERE id = $1';
      await this.client.query(queryText, [id]).catch(err => logAndExit(err));
      console.log('The following expense has been deleted:');
      this.displayExpenses(data);
    } else {
      console.log(`There is no expense with the id '#${id}'`);
    }

    await this.client.end().catch(err => logAndExit(err));
  }

  async deleteAllExpenses() {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));
    await this.client.query('DELETE FROM expenses').catch(err => logAndExit(err));
    console.log('All expenses have been deleted');

    await this.client.end().catch(err => logAndExit(err));
  }

  async setupSchema() {
    let tableExistsQuery = `SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses'`;

    let tableCreationQuery = `CREATE TABLE expenses (
      id serial PRIMARY KEY,
      amount numeric(6, 2) NOT NULL,
      memo text NOT NULL,
      created_on date NOT NULL
    )`;

    let data = await this.client.query(tableExistsQuery).catch(err => logAndExit(err));

    if (data.rows[0].count === '0') {
      await this.client.query(tableCreationQuery).catch(err => logAndExit(err));
    }
  }

  displayExpenses(data) {
    data.rows.forEach(row => {
      console.log(
        row.id.toString().padStart(3) + " | " +
        row.created_on.toDateString() + " | " +
        row.amount.padStart(10) + " | " +
        row.memo
      );
    });
  }

  displayCount(data) {
    let count = data.rows.length;
    if (count === 0) console.log('There are no expenses.');
    else if (count === 1) console.log('There is 1 expense.');
    else console.log(`There are ${count} expenses.`);
  }

  displayTotal(data) {
    let total = data.rows.reduce((acc, row) => acc + Number(row.amount), 0);
    console.log(`----------------------------------------------------
      Total                   ${total}`);
  }
}

class CLI {
  static HELP() {
    return `An expense recording system

    Commands:
    
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field`;
  }

  constructor() {
    this.application = new ExpenseData();
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  run(args) {
    let command = args[2];

    if (command === 'list') {
      this.application.listExpenses();
    } else if (command === 'add') {
      let amount = PROCESS.argv[3];
      let memo = PROCESS.argv[4];
      if (amount && memo) {
        this.application.addExpense(amount, memo);
      } else {
        console.log('You must provide an amount and memo.');
      }
    } else if (command === 'search') {
      this.application.searchExpenses(args[3]);
    } else if (command === 'delete') {
      this.application.deleteExpense(args[3]);
    } else if (command === 'clear') {
      let rl = READLINE.createInterface({
        input: PROCESS.stdin,
        output: PROCESS.stdout
      });
      let questionText = 'This will remove all expenses. Are you sure? (y/n) ';
      rl.question(questionText, (answer) => {
        if (answer === 'y') {
          this.application.deleteAllExpenses();
        }
        rl.close();
      });
    } else {
      this.displayHelp();
    }
  }
}

let cli = new CLI();
cli.run(PROCESS.argv);
